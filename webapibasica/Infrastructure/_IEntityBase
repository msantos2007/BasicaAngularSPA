using System.Linq.Expressions;
using Microsoft.EntityFrameworkCore;
using webapibasica.Data;

namespace _webapibasica.Infrastructure;

public class Disposable : IDisposable
{
    private bool isDisposed;

    ~Disposable()
    {
        Dispose(false);
    }

    public void Dispose()
    {
        Dispose(true);
        GC.SuppressFinalize(this);
    }
    private void Dispose(bool disposing)
    {
        if (!isDisposed && disposing)
        {
            DisposeCore();
        }

        isDisposed = true;
    }

    // Ovveride this to dispose custom objects
    protected virtual void DisposeCore()
    {
    }
}

public interface IDbFactory : IDisposable
{
    BasicaContext Init();
}

public class DbFactory : Disposable, IDbFactory
{
    BasicaContext? _dbContext;

    public BasicaContext Init()
    {
        return _dbContext!;
    }

    protected override void DisposeCore()
    {
        if (_dbContext != null) _dbContext.Dispose();
    }
}


public interface IEntityBase
{
    int ID { get; set; }
}

public interface IEntityBaseRepository<T> where T : class, IEntityBase, new()
{
    IQueryable<T> AllIncluding(params Expression<Func<T, object>>[] includeProperties);
    IQueryable<T> All { get; }
    IQueryable<T> GetAll();
    T GetSingle(int id);
    IQueryable<T> FindBy(System.Linq.Expressions.Expression<Func<T, bool>> predicate);
    void Add(T entity);
    void Delete(T entity);
    void Edit(T entity);
}

public class EntityBaseRepository<T> : IEntityBaseRepository<T> where T : class, IEntityBase, new()
{
    private webapibasica.Data.BasicaContext dataContext;

    #region Properties
    protected IDbFactory DbFactory
    {
        get;
        private set;
    }

    protected BasicaContext DbContext
    {
        get { return dataContext ?? (dataContext = DbFactory.Init()); } //
    }
    public EntityBaseRepository(IDbFactory dbFactory)
    {
        DbFactory = dbFactory;
    }
    #endregion

    public virtual IQueryable<T> GetAll()
    {
        return DbContext.Set<T>();
    }
    public virtual IQueryable<T> All
    {
        get
        {
            return GetAll();
        }
    }
    public virtual IQueryable<T> AllIncluding(params Expression<Func<T, object>>[] includeProperties)
    {
        IQueryable<T> query = DbContext.Set<T>();
        foreach (var includeProperty in includeProperties)
        {
            query = query.Include(includeProperty);
        }
        return query;
    }
    public T GetSingle(int id)
    {
        return GetAll().FirstOrDefault(x => x.ID == id);
    }
    public virtual IQueryable<T> FindBy(Expression<Func<T, bool>> predicate)
    {
        return DbContext.Set<T>().Where(predicate);
    }

    public virtual void Add(T entity)
    {
        DbEntityEntry dbEntityEntry = DbContext.Entry<T>(entity);
        DbContext.Set<T>().Add(entity);
    }
    public virtual void Edit(T entity)
    {
        DbEntityEntry dbEntityEntry = DbContext.Entry<T>(entity);
        dbEntityEntry.State = EntityState.Modified;
    }
    public virtual void Delete(T entity)
    {
        DbEntityEntry dbEntityEntry = DbContext.Entry<T>(entity);
        dbEntityEntry.State = EntityState.Deleted;
    }
}